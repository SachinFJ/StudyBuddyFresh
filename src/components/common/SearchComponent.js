import React, { useState } from 'react';
import { View, TextInput, TouchableOpacity, Text, StyleSheet, FlatList } from 'react-native';
import Theme from '../../utils/Theme';

/**
 * SearchComponent - ‡§ñ‡•ã‡§ú ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•à‡§≤‡§ø‡§ü‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
 * ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç, ‡§ü‡•â‡§™‡§ø‡§ï‡•ç‡§∏ ‡§î‡§∞ ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è
 * 
 * Props:
 * @param {String} placeholder - ‡§ñ‡•ã‡§ú ‡§¨‡§æ‡§∞ ‡§ï‡§æ ‡§™‡•ç‡§≤‡•á‡§∏‡§π‡•ã‡§≤‡•ç‡§°‡§∞
 * @param {Function} onSearch - ‡§ñ‡•ã‡§ú ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
 * @param {Function} onResultSelect - ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ö‡§Ø‡§® ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
 * @param {Object} style - ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§∏‡•ç‡§ü‡§æ‡§á‡§≤
 */
const SearchComponent = ({
  placeholder = "‡§ñ‡•ã‡§ú‡•á‡§Ç...",
  onSearch,
  onResultSelect,
  style = {}
}) => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [isSearching, setIsSearching] = useState(false);
  
  // ‡§°‡•á‡§Æ‡•ã ‡§∏‡§∞‡•ç‡§ö ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü‡•ç‡§∏ - ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§ê‡§™ ‡§Æ‡•á‡§Ç API ‡§ï‡•â‡§≤ ‡§Ø‡§æ ‡§°‡•á‡§ü‡§æ ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞‡§ø‡§Ç‡§ó ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§π‡•ã‡§ó‡§æ
  const demoResults = [
    { id: 'r1', type: 'question', text: '‡§≠‡§æ‡§∞‡§§ ‡§ï‡§æ ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§™‡§ï‡•ç‡§∑‡•Ä ‡§ï‡•å‡§® ‡§∏‡§æ ‡§π‡•à?' },
    { id: 'r2', type: 'topic', text: '‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§á‡§§‡§ø‡§π‡§æ‡§∏' },
    { id: 'r3', type: 'book', text: '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡•ç‡§û‡§æ‡§®' },
    { id: 'r4', type: 'question', text: '‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§∏‡•á ‡§™‡•É‡§•‡•ç‡§µ‡•Ä ‡§ï‡•Ä ‡§î‡§∏‡§§ ‡§¶‡•Ç‡§∞‡•Ä ‡§ï‡§ø‡§§‡§®‡•Ä ‡§π‡•à?' },
    { id: 'r5', type: 'topic', text: '‡§≠‡•Ç‡§ó‡•ã‡§≤' },
  ];
  
  // ‡§ñ‡•ã‡§ú ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
  const handleSearch = (text) => {
    setQuery(text);
    
    if (text.trim()) {
      setIsSearching(true);
      
      // ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§ê‡§™ ‡§Æ‡•á‡§Ç API ‡§ï‡•â‡§≤ ‡§Ø‡§æ ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞‡§ø‡§Ç‡§ó ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•ã‡§ó‡•Ä
      // ‡§Ö‡§≠‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•á‡§Æ‡•ã ‡§°‡•á‡§ü‡§æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
      setTimeout(() => {
        const filtered = demoResults.filter(item => 
          item.text.toLowerCase().includes(text.toLowerCase())
        );
        setResults(filtered);
        setIsSearching(false);
        
        if (onSearch) {
          onSearch(text, filtered);
        }
      }, 300);
    } else {
      setResults([]);
    }
  };
  
  // ‡§ñ‡•ã‡§ú ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç
  const clearSearch = () => {
    setQuery('');
    setResults([]);
  };
  
  // ‡§ñ‡•ã‡§ú ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ü‡§æ‡§á‡§™ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ü‡§á‡§ï‡§®
  const getTypeIcon = (type) => {
    switch (type) {
      case 'question': return 'üìù';
      case 'topic': return 'üìö';
      case 'book': return 'üìñ';
      default: return 'üîç';
    }
  };
  
  // ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ö‡§Ø‡§® ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
  const handleResultPress = (item) => {
    if (onResultSelect) {
      onResultSelect(item);
    }
    clearSearch();
  };

  return (
    <View style={[styles.container, style]}>
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          placeholder={placeholder}
          value={query}
          onChangeText={handleSearch}
          placeholderTextColor="#999"
        />
        
        {query.length > 0 && (
          <TouchableOpacity onPress={clearSearch} style={styles.clearButton}>
            <Text style={styles.clearButtonText}>‚úï</Text>
          </TouchableOpacity>
        )}
      </View>
      
      {isSearching && (
        <Text style={styles.searchingText}>‡§ñ‡•ã‡§ú ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...</Text>
      )}
      
      {results.length > 0 && (
        <View style={styles.resultsContainer}>
          <FlatList
            data={results}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <TouchableOpacity
                style={styles.resultItem}
                onPress={() => handleResultPress(item)}
              >
                <Text style={styles.resultTypeIcon}>{getTypeIcon(item.type)}</Text>
                <View style={styles.resultContent}>
                  <Text style={styles.resultText}>{item.text}</Text>
                  <Text style={styles.resultType}>
                    {item.type === 'question' ? '‡§™‡•ç‡§∞‡§∂‡•ç‡§®' : 
                     item.type === 'topic' ? '‡§µ‡§ø‡§∑‡§Ø' : '‡§™‡•Å‡§∏‡•ç‡§§‡§ï'}
                  </Text>
                </View>
              </TouchableOpacity>
            )}
            ItemSeparatorComponent={() => <View style={styles.resultSeparator} />}
          />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    width: '100%',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Theme.COLORS.WHITE,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E0E0E0',
    paddingHorizontal: 12,
  },
  input: {
    flex: 1,
    paddingVertical: 12,
    fontSize: 16,
    color: Theme.COLORS.SECONDARY,
  },
  clearButton: {
    padding: 8,
  },
  clearButtonText: {
    fontSize: 16,
    color: '#999',
    fontWeight: 'bold',
  },
  searchingText: {
    marginTop: 8,
    fontSize: 14,
    color: '#999',
    fontStyle: 'italic',
  },
  resultsContainer: {
    marginTop: 8,
    backgroundColor: Theme.COLORS.WHITE,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E0E0E0',
    maxHeight: 200,
  },
  resultItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
  },
  resultTypeIcon: {
    fontSize: 16,
    marginRight: 12,
  },
  resultContent: {
    flex: 1,
  },
  resultText: {
    fontSize: 14,
    color: Theme.COLORS.SECONDARY,
    marginBottom: 4,
  },
  resultType: {
    fontSize: 12,
    color: '#999',
  },
  resultSeparator: {
    height: 1,
    backgroundColor: '#F0F0F0',
    marginHorizontal: 12,
  },
});

export default SearchComponent;