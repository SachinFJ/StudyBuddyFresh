import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  SafeAreaView,
  ScrollView,
  Animated,
  BackHandler,
  Alert,
  Modal,
} from 'react-native';

/**
 * QuizScreen - рдХреНрд╡рд┐рдЬрд╝ рд╕реНрдХреНрд░реАрди рдЬрд╣рд╛рдВ рдпреВрдЬрд░ рдХреНрд╡рд┐рдЬрд╝ рдкреНрд░рд╢реНрдиреЛрдВ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░ рд╕рдХрддрд╛ рд╣реИ
 * @param {Object} route - рдиреЗрд╡рд┐рдЧреЗрд╢рди рд░реВрдЯ рдЬрд┐рд╕рдореЗрдВ bookId, topicId рд╣реЛрдЧрд╛
 * @param {Object} navigation - рдиреЗрд╡рд┐рдЧреЗрд╢рди рдХрдВрдЯреНрд░реЛрд▓рд░
 */
const QuizScreen = ({ route, navigation }) => {
  // рд░реВрдЯ рдкреИрд░рд╛рдореАрдЯрд░реНрд╕ рд╕реЗ рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
  const { bookId, topicId } = route?.params || { bookId: 'book1', topicId: 'topic1' };
  
  // рд╕реНрдЯреЗрдЯ
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showAnswer, setShowAnswer] = useState(false);
  const [completed, setCompleted] = useState(false);
  const [timeElapsed, setTimeElapsed] = useState(0);
  const [isTimerActive, setIsTimerActive] = useState(true);
  const [showTimeoutModal, setShowTimeoutModal] = useState(false);
  
  // рдПрдирд┐рдореЗрд╢рди рд╡реИрд▓реНрдпреВрдЬрд╝
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const progressAnim = useRef(new Animated.Value(0)).current;
  
  // рдЯрд╛рдЗрдорд░ рд░реЗрдлрд░реЗрдВрд╕
  const timerRef = useRef(null);
  const timeoutDuration = 1800; // 30 рдорд┐рдирдЯ (рд╕реЗрдХрдВрдбреНрд╕ рдореЗрдВ)
  
  // рдбреЗрдореЛ рдкреНрд░рд╢реНрди
  const questions = [
    {
      id: 'q1',
      text: 'рднрд╛рд░рдд рдХрд╛ рд░рд╛рд╖реНрдЯреНрд░реАрдп рдкрдХреНрд╖реА рдХреМрди рд╕рд╛ рд╣реИ?',
      options: ['рдореЛрд░', 'рдХрдмреВрддрд░', 'рдЧреМрд░реИрдпрд╛', 'рд╣рдВрд╕'],
      correctAnswer: 0,
    },
    {
      id: 'q2',
      text: 'рднрд╛рд░рдд рдореЗрдВ рдХрд┐рддрдиреЗ рд░рд╛рдЬреНрдп рд╣реИрдВ?',
      options: ['27', '28', '29', '30'],
      correctAnswer: 1,
    },
    {
      id: 'q3',
      text: 'рдирд┐рдореНрди рдореЗрдВ рд╕реЗ рдХреМрди рднрд╛рд░рдд рдХрд╛ рдкрдбрд╝реЛрд╕реА рджреЗрд╢ рдирд╣реАрдВ рд╣реИ?',
      options: ['рдиреЗрдкрд╛рд▓', 'рдореНрдпрд╛рдВрдорд╛рд░', 'рдЕрдлрдЧрд╛рдирд┐рд╕реНрддрд╛рди', 'рдЗрдВрдбреЛрдиреЗрд╢рд┐рдпрд╛'],
      correctAnswer: 3,
    },
    {
      id: 'q4',
      text: 'рднрд╛рд░рдд рдХреЗ рдкреНрд░рдердо рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдХреМрди рдереЗ?',
      options: ['рд╕рд░рджрд╛рд░ рдкрдЯреЗрд▓', 'рдЬрд╡рд╛рд╣рд░рд▓рд╛рд▓ рдиреЗрд╣рд░реВ', 'рдорд╣рд╛рддреНрдорд╛ рдЧрд╛рдВрдзреА', 'рдмреА.рдЖрд░. рдЕрдореНрдмреЗрдбрдХрд░'],
      correctAnswer: 1,
    },
    {
      id: 'q5',
      text: 'рдХрд┐рд╕ рдирджреА рдХреЛ рднрд╛рд░рдд рдХреА рд╕рдмрд╕реЗ рдкрд╡рд┐рддреНрд░ рдирджреА рдорд╛рдирд╛ рдЬрд╛рддрд╛ рд╣реИ?',
      options: ['рдмреНрд░рд╣реНрдордкреБрддреНрд░', 'рдпрдореБрдирд╛', 'рдЧреЛрджрд╛рд╡рд░реА', 'рдЧрдВрдЧрд╛'],
      correctAnswer: 3,
    },
    {
      id: 'q6',
      text: 'рдлреНрд▓реЛрд░рд╛рдЗрдб рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХрд╛ рддрддреНрд╡ рд╣реИ?',
      options: ['рдзрд╛рддреБ', 'рдЕрдзрд╛рддреБ', 'рдЙрдкрдзрд╛рддреБ', 'рджреБрд░реНрд▓рдн рдореГрджрд╛ рддрддреНрд╡'],
      correctAnswer: 1,
    },
    {
      id: 'q7',
      text: 'рд╡рд┐рдЯрд╛рдорд┐рди C рдХрд╛ рд░рд╛рд╕рд╛рдпрдирд┐рдХ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?',
      options: ['рдПрд╕реНрдХреЙрд░реНрдмрд┐рдХ рдПрд╕рд┐рдб', 'рдлреЙрд▓рд┐рдХ рдПрд╕рд┐рдб', 'рд╕рд┐рдЯреНрд░рд┐рдХ рдПрд╕рд┐рдб', 'рд▓реИрдХреНрдЯрд┐рдХ рдПрд╕рд┐рдб'],
      correctAnswer: 0,
    },
    {
      id: 'q8',
      text: 'рдкреГрдереНрд╡реА рдХрд╛ рд╕рдмрд╕реЗ рдмрдбрд╝рд╛ рдорд╣рд╛рджреНрд╡реАрдк рдХреМрди рд╕рд╛ рд╣реИ?',
      options: ['рдЕрдлреНрд░реАрдХрд╛', 'рдЙрддреНрддрд░реА рдЕрдореЗрд░рд┐рдХрд╛', 'рдПрд╢рд┐рдпрд╛', 'рдЕрдВрдЯрд╛рд░реНрдХрдЯрд┐рдХрд╛'],
      correctAnswer: 2,
    },
    {
      id: 'q9',
      text: 'рддрд╛рдЬрдорд╣рд▓ рдХрд┐рд╕ рдирджреА рдХреЗ рдХрд┐рдирд╛рд░реЗ рд╕реНрдерд┐рдд рд╣реИ?',
      options: ['рдЧрдВрдЧрд╛', 'рдпрдореБрдирд╛', 'рд╕рд░рд╕реНрд╡рддреА', 'рдмреНрд░рд╣реНрдордкреБрддреНрд░'],
      correctAnswer: 1,
    },
    {
      id: 'q10',
      text: 'рднрд╛рд░рддреАрдп рдЕрдВрддрд░рд┐рдХреНрд╖ рдЕрдиреБрд╕рдВрдзрд╛рди рд╕рдВрдЧрдарди рдХрд╛ рдореБрдЦреНрдпрд╛рд▓рдп рдХрд╣рд╛рдВ рд╕реНрдерд┐рдд рд╣реИ?',
      options: ['рдореБрдВрдмрдИ', 'рдмреЗрдВрдЧрд▓реБрд░реБ', 'рд╣реИрджрд░рд╛рдмрд╛рдж', 'рдирдИ рджрд┐рд▓реНрд▓реА'],
      correctAnswer: 1,
    },
  ];
  
  // рдЯрд╛рдЗрдорд░ рд╕реЗрдЯрдЕрдк
  useEffect(() => {
    if (isTimerActive && !completed) {
      timerRef.current = setInterval(() => {
        setTimeElapsed(prev => {
          const newTime = prev + 1;
          // рдЯрд╛рдЗрдо рдЖрдЙрдЯ рдЪреЗрдХ
          if (newTime >= timeoutDuration) {
            clearInterval(timerRef.current);
            setShowTimeoutModal(true);
            return timeoutDuration;
          }
          return newTime;
        });
      }, 1000);
    }
    
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [isTimerActive, completed]);
  
  // рдкреНрд░рд╢реНрди рд▓реЛрдб рд╣реЛрдиреЗ рдкрд░ рдПрдирд┐рдореЗрд╢рди
  useEffect(() => {
    Animated.sequence([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }),
      Animated.timing(progressAnim, {
        toValue: (currentQuestion + 1) / questions.length,
        duration: 300,
        useNativeDriver: false,
      }),
    ]).start();
    
    setSelectedAnswer(null);
    setShowAnswer(false);
  }, [currentQuestion, fadeAnim, progressAnim]);
  
  // рдмреИрдХ рдмрдЯрди рд╣реИрдВрдбрд▓рд░
  useEffect(() => {
    const backAction = () => {
      Alert.alert(
        'рдХреНрд╡рд┐рдЬрд╝ рдЫреЛрдбрд╝реЗрдВ?',
        'рдХреНрдпрд╛ рдЖрдк рд╡рд╛рдХрдИ рдХреНрд╡рд┐рдЬрд╝ рдЫреЛрдбрд╝рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? рдЖрдкрдХреА рдкреНрд░рдЧрддрд┐ рд╕рд╣реЗрдЬреА рдирд╣реАрдВ рдЬрд╛рдПрдЧреАред',
        [
          { text: 'рдирд╣реАрдВ', style: 'cancel', onPress: () => {} },
          { text: 'рд╣рд╛рдВ', style: 'destructive', onPress: () => navigation.goBack() }
        ]
      );
      return true;
    };
    
    const backHandler = BackHandler.addEventListener('hardwareBackPress', backAction);
    
    return () => backHandler.remove();
  }, [navigation]);
  
  // рдЯрд╛рдЗрдорд░ рдХреЛ рдлреЙрд░реНрдореЗрдЯ рдХрд░реЗрдВ (MM:SS)
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };
  
  // рдЙрддреНрддрд░ рдЪреЗрдХ рдХрд░реЗрдВ
  const checkAnswer = (index) => {
    setSelectedAnswer(index);
    setShowAnswer(true);
    
    // рд╕рд╣реА рдЙрддреНрддрд░ рдЪреЗрдХ рдХрд░реЗрдВ
    if (index === questions[currentQuestion].correctAnswer) {
      setScore(score + 1);
    }
    
    // рдХреБрдЫ рд╕рдордп рдмрд╛рдж рдЕрдЧрд▓реЗ рдкреНрд░рд╢реНрди рдкрд░ рдЬрд╛рдПрдВ
    setTimeout(() => {
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
        fadeAnim.setValue(0); // рдлреЗрдб рдПрдирд┐рдореЗрд╢рди рд░реАрд╕реЗрдЯ
      } else {
        // рдХреНрд╡рд┐рдЬрд╝ рдкреВрд░рд╛ рд╣реБрдЖ
        setCompleted(true);
        setIsTimerActive(false);
      }
    }, 1500);
  };
  
  // рдХреНрд╡рд┐рдЬрд╝ рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ
  const resetQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setSelectedAnswer(null);
    setShowAnswer(false);
    setCompleted(false);
    setTimeElapsed(0);
    setIsTimerActive(true);
    fadeAnim.setValue(0);
    progressAnim.setValue(0);
  };
  
  // рд╣реЛрдо рд╕реНрдХреНрд░реАрди рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ
  const goToHome = () => {
    navigation.goBack();
  };
  
  // рдХреНрд╡рд┐рдЬрд╝ рдЬрд╛рд░реА рд░рдЦреЗрдВ (рдЯрд╛рдЗрдо рдЖрдЙрдЯ рдХреЗ рдмрд╛рдж)
  const continueQuiz = () => {
    setShowTimeoutModal(false);
    setIsTimerActive(true);
    setTimeElapsed(0);
  };
  
  // рдЕрдЧрд░ рдХреНрд╡рд┐рдЬрд╝ рдкреВрд░рд╛ рд╣реЛ рдЧрдпрд╛ рд╣реИ рддреЛ рд░рд┐рдЬрд▓реНрдЯ рд╕реНрдХреНрд░реАрди рджрд┐рдЦрд╛рдПрдВ
  if (completed) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.resultContainer}>
          <Text style={styles.resultTitle}>рдХреНрд╡рд┐рдЬрд╝ рдкреВрд░рд╛ рд╣реБрдЖ!</Text>
          <View style={styles.scoreCard}>
            <Text style={styles.scoreText}>
              рдЖрдкрдХрд╛ рд╕реНрдХреЛрд░: <Text style={styles.scoreNumber}>{score}</Text>/{questions.length}
            </Text>
            <Text style={styles.percentageText}>
              {Math.round((score / questions.length) * 100)}%
            </Text>
            
            <View style={styles.resultProgressBar}>
              <View 
                style={[
                  styles.resultProgressFill, 
                  { width: `${(score / questions.length) * 100}%` }
                ]} 
              />
            </View>
            
            <Text style={styles.timeText}>
              рдХреБрд▓ рд╕рдордп: {formatTime(timeElapsed)}
            </Text>
          </View>
          
          <View style={styles.resultMessage}>
            <Text style={styles.resultMessageText}>
              {score === questions.length
                ? 'ЁЯОЙ рдмрдзрд╛рдИ рд╣реЛ! рдЖрдкрдиреЗ рд╕рднреА рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рд╕рд╣реА рдЙрддреНрддрд░ рджрд┐рдП!'
                : score >= questions.length * 0.7
                ? 'ЁЯСН рдЕрдЪреНрдЫрд╛ рдкреНрд░рджрд░реНрд╢рди! рдереЛрдбрд╝рд╛ рдФрд░ рдЕрднреНрдпрд╛рд╕ рд╕реЗ рдЖрдк рдФрд░ рдмреЗрд╣рддрд░ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред'
                : 'ЁЯУЪ рдЕрднреНрдпрд╛рд╕ рдЬрд╛рд░реА рд░рдЦреЗрдВ! рдЕрдЧрд▓реА рдмрд╛рд░ рдЖрдк рдмреЗрд╣рддрд░ рдХрд░реЗрдВрдЧреЗред'}
            </Text>
          </View>
          
          <View style={styles.buttonContainer}>
            <TouchableOpacity 
              style={[styles.button, styles.tryAgainButton]} 
              onPress={resetQuiz}
            >
              <Text style={styles.buttonText}>рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ</Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[styles.button, styles.homeButton]} 
              onPress={goToHome}
            >
              <Text style={styles.buttonText}>рд╣реЛрдо рд╕реНрдХреНрд░реАрди</Text>
            </TouchableOpacity>
          </View>
        </View>
      </SafeAreaView>
    );
  }
  
  return (
    <SafeAreaView style={styles.container}>
      {/* рд╣реЗрдбрд░ */}
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => {
            Alert.alert(
              'рдХреНрд╡рд┐рдЬрд╝ рдЫреЛрдбрд╝реЗрдВ?',
              'рдХреНрдпрд╛ рдЖрдк рд╡рд╛рдХрдИ рдХреНрд╡рд┐рдЬрд╝ рдЫреЛрдбрд╝рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? рдЖрдкрдХреА рдкреНрд░рдЧрддрд┐ рд╕рд╣реЗрдЬреА рдирд╣реАрдВ рдЬрд╛рдПрдЧреАред',
              [
                { text: 'рдирд╣реАрдВ', style: 'cancel', onPress: () => {} },
                { text: 'рд╣рд╛рдВ', style: 'destructive', onPress: () => navigation.goBack() }
              ]
            );
          }}
        >
          <Text style={styles.backButtonText}>тЖР</Text>
        </TouchableOpacity>
        
        <View style={styles.headerTitleContainer}>
          <Text style={styles.headerTitle}>рдХреНрд╡рд┐рдЬрд╝</Text>
        </View>
        
        <View style={styles.timerContainer}>
          <Text style={styles.timerText}>{formatTime(timeElapsed)}</Text>
        </View>
      </View>
      
      {/* рдкреНрд░рдЧрддрд┐ рдмрд╛рд░ */}
      <View style={styles.progressContainer}>
        <View style={styles.progressBar}>
          <Animated.View 
            style={[
              styles.progressFill,
              { width: progressAnim.interpolate({
                inputRange: [0, 1],
                outputRange: ['0%', '100%'],
              }) }
            ]} 
          />
        </View>
        <Text style={styles.progressText}>
          {currentQuestion + 1} / {questions.length}
        </Text>
      </View>
      
      <ScrollView style={styles.content} contentContainerStyle={styles.contentContainer}>
        {/* рдкреНрд░рд╢реНрди рдХрд╛рд░реНрдб */}
        <Animated.View 
          style={[
            styles.questionCard,
            { opacity: fadeAnim, transform: [{ translateY: fadeAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [20, 0],
            }) }] }
          ]}
        >
          <Text style={styles.questionNumber}>рдкреНрд░рд╢реНрди {currentQuestion + 1}</Text>
          <Text style={styles.questionText}>{questions[currentQuestion].text}</Text>
          
          {/* рд╡рд┐рдХрд▓реНрдк */}
          <View style={styles.optionsContainer}>
            {questions[currentQuestion].options.map((option, index) => (
              <TouchableOpacity
                key={index}
                style={[
                  styles.optionButton,
                  selectedAnswer === index && styles.selectedOption,
                  showAnswer && index === questions[currentQuestion].correctAnswer && styles.correctOption,
                  showAnswer && selectedAnswer === index && 
                  selectedAnswer !== questions[currentQuestion].correctAnswer && styles.incorrectOption,
                ]}
                onPress={() => !showAnswer && checkAnswer(index)}
                disabled={showAnswer}
              >
                <View style={styles.optionIndex}>
                  <Text style={styles.optionIndexText}>{String.fromCharCode(65 + index)}</Text>
                </View>
                <Text style={styles.optionText}>{option}</Text>
                
                {showAnswer && index === questions[currentQuestion].correctAnswer && (
                  <Text style={styles.correctIndicator}>тЬУ</Text>
                )}
                
                {showAnswer && selectedAnswer === index && 
                 selectedAnswer !== questions[currentQuestion].correctAnswer && (
                  <Text style={styles.incorrectIndicator}>тЬЧ</Text>
                )}
              </TouchableOpacity>
            ))}
          </View>
        </Animated.View>
        
        {/* рдлреАрдбрдмреИрдХ рдореИрд╕реЗрдЬ */}
        {showAnswer && (
          <View style={styles.feedbackContainer}>
            <Text style={[
              styles.feedbackText,
              selectedAnswer === questions[currentQuestion].correctAnswer
                ? styles.correctFeedbackText
                : styles.incorrectFeedbackText
            ]}>
              {selectedAnswer === questions[currentQuestion].correctAnswer
                ? 'тЬУ рд╕рд╣реА рдЙрддреНрддрд░!'
                : `тЬЧ рдЧрд▓рдд рдЙрддреНрддрд░ред рд╕рд╣реА рдЙрддреНрддрд░: ${questions[currentQuestion].options[questions[currentQuestion].correctAnswer]}`}
            </Text>
          </View>
        )}
        
        {/* "рдзрд╛рдЧрд╛ рдЬреЛрдбрд╝реЗрдВ" рд╕реЗрдХреНрд╢рди - рд╣рд░ 5 рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рдмрд╛рдж */}
        {currentQuestion > 0 && (currentQuestion + 1) % 5 === 0 && !showAnswer && (
          <View style={styles.threadSection}>
            <Text style={styles.threadTitle}>ЁЯУМ рдзрд╛рдЧрд╛ рдЬреЛрдбрд╝реЗрдВ</Text>
            <Text style={styles.threadText}>
              рдЗрд╕ рд╡рд┐рд╖рдп рд╕реЗ рдЬреБрдбрд╝реЗ рдЕрдиреНрдп рдорд╣рддреНрд╡рдкреВрд░реНрдг рддрдереНрдп:
            </Text>
            <View style={styles.threadContent}>
              <Text style={styles.threadItem}>тАв рднрд╛рд░рдд рдХреЗ рдкрд╢реНрдЪрд┐рдореА рдШрд╛рдЯ рдпреВрдиреЗрд╕реНрдХреЛ рдХреА рд╡рд┐рд╢реНрд╡ рдзрд░реЛрд╣рд░ рд╕реНрдерд▓ рд╣реИрдВред</Text>
              <Text style={styles.threadItem}>тАв рднрд╛рд░рдд рдореЗрдВ рдХреБрд▓ 28 рд░рд╛рдЬреНрдп рдФрд░ 8 рдХреЗрдВрджреНрд░ рд╢рд╛рд╕рд┐рдд рдкреНрд░рджреЗрд╢ рд╣реИрдВред</Text>
              <Text style={styles.threadItem}>тАв рд╣рд┐рдорд╛рд▓рдп рдкрд░реНрд╡рдд рд╢реНрд░реГрдВрдЦрд▓рд╛ рджреБрдирд┐рдпрд╛ рдХреА рд╕рдмрд╕реЗ рдпреБрд╡рд╛ рдкрд░реНрд╡рдд рд╢реНрд░реГрдВрдЦрд▓рд╛ рд╣реИред</Text>
            </View>
          </View>
        )}
      </ScrollView>
      
      {/* рдЯрд╛рдЗрдо рдЖрдЙрдЯ рдореЙрдбрд▓ */}
      <Modal
        visible={showTimeoutModal}
        transparent={true}
        animationType="fade"
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>рд╕рдордп рд╕рдорд╛рдкреНрдд!</Text>
            <Text style={styles.modalText}>
              рдЖрдкрдХрд╛ рдХреНрд╡рд┐рдЬрд╝ рд╕рддреНрд░ 30 рдорд┐рдирдЯ рдХрд╛ рд╣реЛ рдЧрдпрд╛ рд╣реИред рдХреНрдпрд╛ рдЖрдк рдЬрд╛рд░реА рд░рдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?
            </Text>
            
            <View style={styles.modalSummary}>
              <Text style={styles.summaryText}>рдкреНрд░рдЧрддрд┐: {currentQuestion + 1}/{questions.length} рдкреНрд░рд╢реНрди</Text>
              <Text style={styles.summaryText}>рд╕реНрдХреЛрд░: {score} рд╕рд╣реА рдЙрддреНрддрд░</Text>
            </View>
            
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={[styles.modalButton, styles.homeButton]}
                onPress={goToHome}
              >
                <Text style={styles.buttonText}>рд╣реЛрдо рд╕реНрдХреНрд░реАрди</Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={[styles.modalButton, styles.continueButton]}
                onPress={continueQuiz}
              >
                <Text style={styles.buttonText}>рдЬрд╛рд░реА рд░рдЦреЗрдВ</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#EFEEEA',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#FE7743',
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  backButton: {
    padding: 8,
  },
  backButtonText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  headerTitleContainer: {
    flex: 1,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  timerContainer: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 16,
  },
  timerText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: '#FFFFFF',
  },
  progressBar: {
    flex: 1,
    height: 6,
    backgroundColor: '#EFEEEA',
    borderRadius: 3,
    marginRight: 10,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#FE7743',
    borderRadius: 3,
  },
  progressText: {
    color: '#273F4F',
    fontWeight: 'bold',
  },
  content: {
    flex: 1,
  },
  contentContainer: {
    padding: 16,
  },
  questionCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 20,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
  },
  questionNumber: {
    fontSize: 14,
    color: '#FE7743',
    marginBottom: 8,
  },
  questionText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#273F4F',
    marginBottom: 20,
  },
  optionsContainer: {
    marginTop: 5,
  },
  optionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F8F8F8',
    padding: 12,
    borderRadius: 8,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: '#EFEEEA',
  },
  selectedOption: {
    backgroundColor: '#FEF3ED',
    borderColor: '#FE7743',
  },
  correctOption: {
    backgroundColor: '#EDF9F0',
    borderColor: '#4CAF50',
  },
  incorrectOption: {
    backgroundColor: '#FEEDED',
    borderColor: '#E74C3C',
  },
  optionIndex: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#EFEEEA',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  optionIndexText: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#273F4F',
  },
  optionText: {
    flex: 1,
    fontSize: 16,
    color: '#273F4F',
  },
  correctIndicator: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#4CAF50',
    marginLeft: 8,
  },
  incorrectIndicator: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#E74C3C',
    marginLeft: 8,
  },
  feedbackContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  feedbackText: {
    fontSize: 16,
    textAlign: 'center',
  },
  correctFeedbackText: {
    color: '#4CAF50',
  },
  incorrectFeedbackText: {
    color: '#E74C3C',
  },
  threadSection: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    borderLeftWidth: 3,
    borderLeftColor: '#FE7743',
  },
  threadTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#273F4F',
    marginBottom: 8,
  },
  threadText: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 12,
  },
  threadContent: {
    backgroundColor: '#F8F8F8',
    borderRadius: 8,
    padding: 12,
  },
  threadItem: {
    fontSize: 14,
    color: '#273F4F',
    marginBottom: 6,
  },
  resultContainer: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
  },
  resultTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#273F4F',
    textAlign: 'center',
    marginBottom: 30,
  },
  scoreCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 20,
    alignItems: 'center',
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    marginBottom: 30,
  },
  scoreText: {
    fontSize: 18,
    color: '#273F4F',
    marginBottom: 8,
  },
  scoreNumber: {
    fontWeight: 'bold',
    color: '#FE7743',
    fontSize: 24,
  },
  percentageText: {
    fontSize: 40,
    fontWeight: 'bold',
    color: '#273F4F',
    marginBottom: 16,
  },
  resultProgressBar: {
    width: '100%',
    height: 10,
    backgroundColor: '#EFEEEA',
    borderRadius: 5,
    marginBottom: 16,
    overflow: 'hidden',
  },
  resultProgressFill: {
    height: '100%',
    backgroundColor: '#FE7743',
    borderRadius: 5,
  },
  timeText: {
    fontSize: 14,
    color: '#666666',
  },
  resultMessage: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 30,
  },
  resultMessageText: {
    fontSize: 16,
    color: '#273F4F',
    textAlign: 'center',
    lineHeight: 24,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  button: {
    flex: 1,
    paddingVertical: 14,
    borderRadius: 8,
    alignItems: 'center',
    margin: 8,
  },
  tryAgainButton: {
    backgroundColor: '#FE7743',
  },
  homeButton: {
    backgroundColor: '#273F4F',
  },
  buttonText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
    fontSize: 16,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 20,
    width: '80%',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.3,
    shadowRadius: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#273F4F',
    textAlign: 'center',
    marginBottom: 16,
  },
  modalText: {
    fontSize: 16,
    color: '#273F4F',
    textAlign: 'center',
    marginBottom: 20,
  },
  modalSummary: {
    backgroundColor: '#F8F8F8',
    borderRadius: 8,
    padding: 12,
    marginBottom: 20,
  },
  summaryText: {
    fontSize: 14,
    color: '#273F4F',
    marginBottom: 6,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  modalButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    margin: 8,
  },
  continueButton: {
    backgroundColor: '#FE7743',
  },
});

export default QuizScreen;