import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  TouchableOpacity,
  FlatList,
  Animated,
  Dimensions,
  Share,
  Alert,
  BackHandler,
  PanResponder,
} from 'react-native';

// рд╕реНрдХреНрд░реАрди рд╡рд┐рдВрдбреЛ рдЖрдпрд╛рдо рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
const { width, height } = Dimensions.get('window');

/**
 * OnelinerScreen - рд╡рдирд▓рд╛рдЗрдирд░ (рдПрдХ-рдкрдВрдХреНрддрд┐ рд╕рд╛рд░) рд╕реНрдХреНрд░реАрди
 * @param {Object} route - рдиреЗрд╡рд┐рдЧреЗрд╢рди рд░реВрдЯ рдЬрд┐рд╕рдореЗрдВ bookId, topicId рд╣реЛрдЧрд╛
 * @param {Object} navigation - рдиреЗрд╡рд┐рдЧреЗрд╢рди рдХрдВрдЯреНрд░реЛрд▓рд░
 */
const OnelinerScreen = ({ route, navigation }) => {
  // рд░реВрдЯ рдкреИрд░рд╛рдореАрдЯрд░реНрд╕ рд╕реЗ рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
  const { bookId, topicId } = route?.params || { bookId: 'book1', topicId: 'topic1' };

  // рд╕реНрдЯреЗрдЯ
  const [currentIndex, setCurrentIndex] = useState(0);
  const [bookmarkedItems, setBookmarkedItems] = useState([]);
  const [viewedItems, setViewedItems] = useState([]);
  const [timeElapsed, setTimeElapsed] = useState(0);
  const [isTimerActive, setIsTimerActive] = useState(true);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [readingMode, setReadingMode] = useState(false);
  
  // рдПрдирд┐рдореЗрд╢рди рд╡реИрд▓реНрдпреВрдЬрд╝
  const fadeAnim = useRef(new Animated.Value(1)).current;
  const translateXAnim = useRef(new Animated.Value(0)).current;
  
  // рдЯрд╛рдЗрдорд░ рд░реЗрдлрд░реЗрдВрд╕
  const timerRef = useRef(null);
  
  // рдкреБрд╕реНрддрдХ рдФрд░ рдЯреЙрдкрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА
  const bookInfo = {
    book1: { name: 'рд╕рд╛рдорд╛рдиреНрдп рдЬреНрдЮрд╛рди', color: '#FE7743' },
    book2: { name: 'рднрд╛рд░рддреАрдп рдЗрддрд┐рд╣рд╛рд╕', color: '#3498DB' },
    book3: { name: 'рднреВрдЧреЛрд▓', color: '#5B8C5A' },
    book4: { name: 'рд╡рд┐рдЬреНрдЮрд╛рди', color: '#9B59B6' },
  };
  
  const topicInfo = {
    topic1: { name: 'рдЗрддрд┐рд╣рд╛рд╕', icon: 'ЁЯУЬ' },
    topic2: { name: 'рднреВрдЧреЛрд▓', icon: 'ЁЯМН' },
    topic3: { name: 'рд░рд╛рдЬрдиреАрддрд┐', icon: 'тЪЦя╕П' },
    topic4: { name: 'рд╡рд┐рдЬреНрдЮрд╛рди', icon: 'ЁЯФм' },
    topic5: { name: 'рд╕рд╛рдорд╛рдиреНрдп рдЬреНрдЮрд╛рди', icon: 'ЁЯТб' },
  };
  
  // рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ
  const categories = [
    { id: 'all', name: 'рд╕рднреА' },
    { id: 'important', name: 'рдорд╣рддреНрд╡рдкреВрд░реНрдг' },
    { id: 'definition', name: 'рдкрд░рд┐рднрд╛рд╖рд╛' },
    { id: 'fact', name: 'рддрдереНрдп' },
    { id: 'date', name: 'рддрд┐рдерд┐' },
  ];
  
  // рдбреЗрдореЛ рд╡рдирд▓рд╛рдЗрдирд░ рдбреЗрдЯрд╛
  const oneliners = [
    {
      id: 'ol1',
      text: 'рднрд╛рд░рдд рдХрд╛ рдХреНрд╖реЗрддреНрд░рдлрд▓ 32,87,263 рд╡рд░реНрдЧ рдХрд┐рд▓реЛрдореАрдЯрд░ рд╣реИ, рдЬреЛ рд╡рд┐рд╢реНрд╡ рдХрд╛ 2.4% рд╣реИред',
      category: 'fact',
      important: true,
    },
    {
      id: 'ol2',
      text: 'рд╣рд┐рдорд╛рд▓рдп рдкрд░реНрд╡рдд рд╢реНрд░реГрдВрдЦрд▓рд╛ рд╡рд┐рд╢реНрд╡ рдХреА рд╕рдмрд╕реЗ рдпреБрд╡рд╛ рд╡рд▓рд┐рдд рдкрд░реНрд╡рдд рд╢реНрд░реГрдВрдЦрд▓рд╛ рд╣реИред',
      category: 'fact',
      important: false,
    },
    {
      id: 'ol3',
      text: 'рднреВрдЧреЛрд▓: рднреВрдкреГрд╖реНрда рдФрд░ рдкреНрд░рд╛рдХреГрддрд┐рдХ рдкрд░реНрдпрд╛рд╡рд░рдг рдХрд╛ рд╡реИрдЬреНрдЮрд╛рдирд┐рдХ рдЕрдзреНрдпрдпрдиред',
      category: 'definition',
      important: true,
    },
    {
      id: 'ol4',
      text: 'рднрд╛рд░рдд рдХреА рд╕рдмрд╕реЗ рд▓рдВрдмреА рдирджреА рдЧрдВрдЧрд╛ рд╣реИ, рдЬрд┐рд╕рдХреА рдХреБрд▓ рд▓рдВрдмрд╛рдИ 2,525 рдХрд┐рд▓реЛрдореАрдЯрд░ рд╣реИред',
      category: 'fact',
      important: true,
    },
    {
      id: 'ol5',
      text: 'рднрд╛рд░рдд рдореЗрдВ 28 рд░рд╛рдЬреНрдп рдФрд░ 8 рдХреЗрдВрджреНрд░ рд╢рд╛рд╕рд┐рдд рдкреНрд░рджреЗрд╢ рд╣реИрдВред',
      category: 'fact',
      important: true,
    },
    {
      id: 'ol6',
      text: '15 рдЕрдЧрд╕реНрдд 1947 рдХреЛ рднрд╛рд░рдд рдХреЛ рд╕реНрд╡рддрдВрддреНрд░рддрд╛ рдкреНрд░рд╛рдкреНрдд рд╣реБрдИ рдереАред',
      category: 'date',
      important: true,
    },
    {
      id: 'ol7',
      text: 'рдЬреНрд╡рд╛рд░-рднрд╛рдЯрд╛ рдЪрдВрджреНрд░рдорд╛ рдХреЗ рдЧреБрд░реБрддреНрд╡рд╛рдХрд░реНрд╖рдг рдЦрд┐рдВрдЪрд╛рд╡ рдХреЗ рдХрд╛рд░рдг рд╣реЛрддрд╛ рд╣реИред',
      category: 'fact',
      important: false,
    },
    {
      id: 'ol8',
      text: 'рд╕реНрдерд╛рдирд╛рдиреНрддрд░рдг рдХреГрд╖рд┐: рд╡рд╣ рдХреГрд╖рд┐ рдкрджреНрдзрддрд┐ рдЬрд┐рд╕рдореЗрдВ рдЬрдВрдЧрд▓ рдХреЗ рдПрдХ рднрд╛рдЧ рдХреЛ рдХрд╛рдЯрдХрд░ рдЦреЗрддреА рдХреА рдЬрд╛рддреА рд╣реИред',
      category: 'definition',
      important: false,
    },
    {
      id: 'ol9',
      text: 'рднрд╛рд░рдд рдХрд╛ рд╕рдмрд╕реЗ рдмрдбрд╝рд╛ рд░рд╛рдЬреНрдп рдХреНрд╖реЗрддреНрд░рдлрд▓ рдХреА рджреГрд╖реНрдЯрд┐ рд╕реЗ рд░рд╛рдЬрд╕реНрдерд╛рди рд╣реИред',
      category: 'fact',
      important: true,
    },
    {
      id: 'ol10',
      text: 'рд╡рд╛рдпреБрдордВрдбрд▓: рдкреГрдереНрд╡реА рдХреЗ рдЪрд╛рд░реЛрдВ рдУрд░ рдореМрдЬреВрдж рдЧреИрд╕реЛрдВ рдХрд╛ рдЖрд╡рд░рдгред',
      category: 'definition',
      important: true,
    },
  ];
  
  // рдлрд┐рд▓реНрдЯрд░ рдХрд┐рдП рдЧрдП рд╡рдирд▓рд╛рдЗрдирд░реНрд╕
  const filteredOneliners = selectedCategory === 'all' 
    ? oneliners 
    : oneliners.filter(item => item.category === selectedCategory);
  
  // рдЯрд╛рдЗрдорд░ рд╕реЗрдЯрдЕрдк
  useEffect(() => {
    if (isTimerActive) {
      timerRef.current = setInterval(() => {
        setTimeElapsed(prev => prev + 1);
      }, 1000);
    }
    
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [isTimerActive]);
  
  // рдмреИрдХ рдмрдЯрди рд╣реИрдВрдбрд▓рд░
  useEffect(() => {
    const backAction = () => {
      // рдкреНрд░рдЧрддрд┐ рдФрд░ рд╕рдордп рдЯреНрд░реИрдХ рдХрд░реЗрдВ...
      
      // рд╡рд╛рдкрд╕ рд╣реЛрдо рд╕реНрдХреНрд░реАрди рдкрд░ рдЬрд╛рдПрдБ
      navigation.goBack();
      return true;
    };
    
    const backHandler = BackHandler.addEventListener('hardwareBackPress', backAction);
    
    return () => backHandler.remove();
  }, [navigation, viewedItems, timeElapsed]);
  
  // рд╡рдирд▓рд╛рдЗрдирд░ рдХреЗ view рдХреЛ рдЯреНрд░реИрдХ рдХрд░реЗрдВ
  useEffect(() => {
    if (filteredOneliners.length > 0 && !viewedItems.includes(filteredOneliners[currentIndex].id)) {
      setViewedItems([...viewedItems, filteredOneliners[currentIndex].id]);
    }
  }, [currentIndex, filteredOneliners, viewedItems]);
  
  // рдЯрд╛рдЗрдорд░ рдХреЛ рдлреЙрд░реНрдореЗрдЯ рдХрд░реЗрдВ (MM:SS)
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };
  
  // рдЯрдЪ рдЬреЗрд╕реНрдЪрд░ (рд╕реНрд╡рд╛рдЗрдк) рдХреА рд╕реЗрдЯрд┐рдВрдЧ
  const panResponder = useRef(
    PanResponder.create({
      onStartShouldSetPanResponder: () => true,
      onPanResponderMove: (evt, gestureState) => {
        // рд╕реНрд╡рд╛рдЗрдк рдХреЗ рджреМрд░рд╛рди рдХрд╛рд░реНрдб рдХреЛ рд╣рд┐рд▓рд╛рдПрдВ
        translateXAnim.setValue(gestureState.dx);
      },
      onPanResponderRelease: (evt, gestureState) => {
        // рдЕрдЧрд░ рд╕реНрд╡рд╛рдЗрдк рдкрд░реНрдпрд╛рдкреНрдд рджреВрд░реА рддрдХ рд╣реИ
        if (gestureState.dx < -50 && currentIndex < filteredOneliners.length - 1) {
          // рдмрд╛рдПрдБ рд╕реНрд╡рд╛рдЗрдк (рдЕрдЧрд▓рд╛)
          goToNext();
        } else if (gestureState.dx > 50 && currentIndex > 0) {
          // рджрд╛рдПрдБ рд╕реНрд╡рд╛рдЗрдк (рдкрд┐рдЫрд▓рд╛)
          goToPrevious();
        } else {
          // рд╕реНрд╡рд╛рдЗрдк рдкрд░реНрдпрд╛рдкреНрдд рдирд╣реАрдВ, рдХрд╛рд░реНрдб рдХреЛ рд╡рд╛рдкрд╕ рд▓рд╛рдПрдВ
          Animated.spring(translateXAnim, {
            toValue: 0,
            friction: 5,
            useNativeDriver: true,
          }).start();
        }
      },
    })
  ).current;
  
  // рдЕрдЧрд▓реЗ рд╡рдирд▓рд╛рдЗрдирд░ рдкрд░ рдЬрд╛рдПрдБ
  const goToNext = () => {
    if (currentIndex < filteredOneliners.length - 1) {
      // рдлреЗрдб рдЖрдЙрдЯ
      Animated.timing(fadeAnim, {
        toValue: 0,
        duration: 150,
        useNativeDriver: true,
      }).start(() => {
        setCurrentIndex(currentIndex + 1);
        translateXAnim.setValue(0);
        
        // рдлреЗрдб рдЗрди
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 150,
          useNativeDriver: true,
        }).start();
      });
    }
  };
  
  // рдкрд┐рдЫрд▓реЗ рд╡рдирд▓рд╛рдЗрдирд░ рдкрд░ рдЬрд╛рдПрдБ
  const goToPrevious = () => {
    if (currentIndex > 0) {
      // рдлреЗрдб рдЖрдЙрдЯ
      Animated.timing(fadeAnim, {
        toValue: 0,
        duration: 150,
        useNativeDriver: true,
      }).start(() => {
        setCurrentIndex(currentIndex - 1);
        translateXAnim.setValue(0);
        
        // рдлреЗрдб рдЗрди
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 150,
          useNativeDriver: true,
        }).start();
      });
    }
  };
  
  // рдмреБрдХрдорд╛рд░реНрдХ рдЯреЙрдЧрд▓
  const toggleBookmark = (id) => {
    if (bookmarkedItems.includes(id)) {
      setBookmarkedItems(bookmarkedItems.filter(item => item !== id));
    } else {
      setBookmarkedItems([...bookmarkedItems, id]);
    }
  };
  
  // рд╡рдирд▓рд╛рдЗрдирд░ рд╢реЗрдпрд░ рдХрд░реЗрдВ
  const shareOneliner = (text) => {
    Share.share({
      message: text + '\n\nStudyBuddy рдРрдк рд╕реЗ рд╢реЗрдпрд░ рдХрд┐рдпрд╛ рдЧрдпрд╛',
    })
      .then(result => console.log(result))
      .catch(error => console.log(error));
  };
  
  // рдкрдврд╝рдиреЗ рдХрд╛ рдореЛрдб рдЯреЙрдЧрд▓ рдХрд░реЗрдВ
  const toggleReadingMode = () => {
    setReadingMode(!readingMode);
  };
  
  // рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ
  const selectCategory = (categoryId) => {
    setSelectedCategory(categoryId);
    setCurrentIndex(0);
  };
  
  // рдкреНрд░рдЧрддрд┐ рдкреНрд░рддрд┐рд╢рдд рдХреА рдЧрдгрдирд╛
  const calculateProgress = () => {
    return filteredOneliners.length > 0 
      ? Math.round((viewedItems.filter(id => 
          filteredOneliners.some(item => item.id === id)).length / filteredOneliners.length) * 100)
      : 0;
  };
  
  return (
    <SafeAreaView style={[
      styles.container,
      readingMode && styles.darkContainer
    ]}>
      {/* рд╣реЗрдбрд░ */}
      <View style={[
        styles.header,
        readingMode && styles.darkHeader
      ]}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Text style={styles.backButtonText}>тЖР</Text>
        </TouchableOpacity>
        
        <View style={styles.headerTitleContainer}>
          <Text style={styles.headerTitle}>рд╡рдирд▓рд╛рдЗрдирд░</Text>
          <Text style={styles.headerSubtitle}>
            {bookInfo[bookId]?.name} - {topicInfo[topicId]?.name}
          </Text>
        </View>
        
        <View style={styles.timerContainer}>
          <Text style={styles.timerText}>{formatTime(timeElapsed)}</Text>
        </View>
      </View>
      
      {/* рдкреНрд░рдЧрддрд┐ рдмрд╛рд░ */}
      <View style={[
        styles.progressContainer,
        readingMode && styles.darkProgressContainer
      ]}>
        <View style={styles.progressBar}>
          <View 
            style={[
              styles.progressFill,
              { width: `${calculateProgress()}%` }
            ]} 
          />
        </View>
        <Text style={[
          styles.progressText,
          readingMode && styles.darkText
        ]}>
          {currentIndex + 1} / {filteredOneliners.length}
        </Text>
      </View>
      
      {/* рд╢реНрд░реЗрдгреА рдлрд┐рд▓реНрдЯрд░ */}
      <View style={[
        styles.categoryContainer,
        readingMode && styles.darkCategoryContainer
      ]}>
        <FlatList
          horizontal
          showsHorizontalScrollIndicator={false}
          data={categories}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <TouchableOpacity
              style={[
                styles.categoryButton,
                selectedCategory === item.id && styles.selectedCategoryButton,
                readingMode && styles.darkCategoryButton,
                selectedCategory === item.id && readingMode && styles.darkSelectedCategoryButton,
              ]}
              onPress={() => selectCategory(item.id)}
            >
              <Text style={[
                styles.categoryText,
                selectedCategory === item.id && styles.selectedCategoryText,
                readingMode && styles.darkText,
              ]}>
                {item.name}
              </Text>
            </TouchableOpacity>
          )}
          contentContainerStyle={styles.categoryList}
        />
      </View>
      
      {/* рдореБрдЦреНрдп рдХрдВрдЯреЗрдВрдЯ - рд╡рдирд▓рд╛рдЗрдирд░ рдХрд╛рд░реНрдб */}
      {filteredOneliners.length > 0 ? (
        <View style={styles.cardContainer} {...panResponder.panHandlers}>
          <Animated.View 
            style={[
              styles.card,
              readingMode && styles.darkCard,
              {
                opacity: fadeAnim,
                transform: [{ translateX: translateXAnim }],
              }
            ]}
          >
            <View style={styles.cardInner}>
              <Text style={[
                styles.cardText,
                readingMode && styles.darkCardText
              ]}>
                {filteredOneliners[currentIndex].text}
              </Text>
              
              <View style={styles.cardCategoryBadge}>
                <Text style={styles.cardCategoryText}>
                  {categories.find(cat => cat.id === filteredOneliners[currentIndex].category)?.name || 'рдЕрдиреНрдп'}
                </Text>
              </View>
              
              {filteredOneliners[currentIndex].important && (
                <View style={styles.importantBadge}>
                  <Text style={styles.importantText}>рдорд╣рддреНрд╡рдкреВрд░реНрдг</Text>
                </View>
              )}
            </View>
            
            <View style={styles.cardActionBar}>
              <TouchableOpacity
                style={styles.actionButton}
                onPress={() => goToPrevious()}
                disabled={currentIndex === 0}
              >
                <Text style={[
                  styles.actionButtonText,
                  currentIndex === 0 && styles.disabledButton,
                  readingMode && styles.darkActionText
                ]}>
                  тЧА рдкрд┐рдЫрд▓рд╛
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={styles.actionButton}
                onPress={() => toggleBookmark(filteredOneliners[currentIndex].id)}
              >
                <Text style={[
                  styles.actionButtonText,
                  bookmarkedItems.includes(filteredOneliners[currentIndex].id) && styles.bookmarkedIcon,
                  readingMode && styles.darkActionText
                ]}>
                  {bookmarkedItems.includes(filteredOneliners[currentIndex].id) ? 'тШЕ' : 'тШЖ'}
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={styles.actionButton}
                onPress={() => shareOneliner(filteredOneliners[currentIndex].text)}
              >
                <Text style={[
                  styles.actionButtonText,
                  readingMode && styles.darkActionText
                ]}>
                  тЖЧ рд╢реЗрдпрд░
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={styles.actionButton}
                onPress={() => goToNext()}
                disabled={currentIndex === filteredOneliners.length - 1}
              >
                <Text style={[
                  styles.actionButtonText,
                  currentIndex === filteredOneliners.length - 1 && styles.disabledButton,
                  readingMode && styles.darkActionText
                ]}>
                  рдЕрдЧрд▓рд╛ тЦ╢
                </Text>
              </TouchableOpacity>
            </View>
          </Animated.View>
          
          <View style={styles.gestureHint}>
            <Text style={[
              styles.gestureHintText,
              readingMode && styles.darkText
            ]}>
              тЧА рдмрд╛рдПрдБ рдпрд╛ рджрд╛рдПрдБ рд╕реНрд╡рд╛рдЗрдк рдХрд░реЗрдВ тЦ╢
            </Text>
          </View>
        </View>
      ) : (
        <View style={styles.emptyContainer}>
          <Text style={[
            styles.emptyText,
            readingMode && styles.darkText
          ]}>
            рдЗрд╕ рд╢реНрд░реЗрдгреА рдореЗрдВ рдХреЛрдИ рд╡рдирд▓рд╛рдЗрдирд░ рдирд╣реАрдВ рд╣реИ
          </Text>
        </View>
      )}
      
      {/* рд╕реНрдЯреЗрдЯреНрд╕ рдФрд░ рдЯреВрд▓реНрд╕ */}
      <View style={[
        styles.statsContainer,
        readingMode && styles.darkStatsContainer
      ]}>
        <View style={styles.stats}>
          <Text style={[
            styles.statText,
            readingMode && styles.darkText
          ]}>
            рджреЗрдЦреЗ рдЧрдП: {viewedItems.filter(id => 
              filteredOneliners.some(item => item.id === id)).length} / {filteredOneliners.length}
          </Text>
          <Text style={[
            styles.statText,
            readingMode && styles.darkText
          ]}>
            рдмреБрдХрдорд╛рд░реНрдХ: {bookmarkedItems.filter(id => 
              filteredOneliners.some(item => item.id === id)).length}
          </Text>
        </View>
        
        <TouchableOpacity
          style={[
            styles.readingModeButton,
            readingMode && styles.darkModeActive
          ]}
          onPress={toggleReadingMode}
        >
          <Text style={[
            styles.readingModeText,
            readingMode && styles.darkModeActiveText
          ]}>
            {readingMode ? 'ЁЯТб рд╕рд╛рдорд╛рдиреНрдп рдореЛрдб' : 'ЁЯМЩ рдкрдврд╝рдиреЗ рдХрд╛ рдореЛрдб'}
          </Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#EFEEEA',
  },
  darkContainer: {
    backgroundColor: '#1A1A1A',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#273F4F',
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  darkHeader: {
    backgroundColor: '#000',
  },
  backButton: {
    padding: 8,
  },
  backButtonText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  headerTitleContainer: {
    flex: 1,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  headerSubtitle: {
    fontSize: 12,
    color: 'rgba(255, 255, 255, 0.8)',
  },
  timerContainer: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 16,
  },
  timerText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: '#FFFFFF',
  },
  darkProgressContainer: {
    backgroundColor: '#333333',
  },
  progressBar: {
    flex: 1,
    height: 6,
    backgroundColor: '#EFEEEA',
    borderRadius: 3,
    marginRight: 10,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#273F4F',
    borderRadius: 3,
  },
  progressText: {
    color: '#273F4F',
    fontWeight: 'bold',
  },
  darkText: {
    color: '#FFFFFF',
  },
  categoryContainer: {
    backgroundColor: '#FFFFFF',
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#EFEEEA',
  },
  darkCategoryContainer: {
    backgroundColor: '#333333',
    borderBottomColor: '#444444',
  },
  categoryList: {
    paddingHorizontal: 12,
  },
  categoryButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: '#F0F0F0',
    borderRadius: 20,
    marginHorizontal: 4,
  },
  darkCategoryButton: {
    backgroundColor: '#444444',
  },
  selectedCategoryButton: {
    backgroundColor: '#273F4F',
  },
  darkSelectedCategoryButton: {
    backgroundColor: '#555555',
  },
  categoryText: {
    color: '#273F4F',
    fontWeight: '500',
  },
  selectedCategoryText: {
    color: '#FFFFFF',
  },
  cardContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  card: {
    width: '100%',
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    overflow: 'hidden',
  },
  darkCard: {
    backgroundColor: '#333333',
  },
  cardInner: {
    padding: 25,
    paddingBottom: 40,
    minHeight: 200,
    justifyContent: 'center',
  },
  cardText: {
    fontSize: 18,
    lineHeight: 28,
    color: '#273F4F',
    textAlign: 'center',
  },
  darkCardText: {
    color: '#FFFFFF',
  },
  cardCategoryBadge: {
    position: 'absolute',
    top: 10,
    left: 10,
    backgroundColor: '#F0F0F0',
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
  },
  cardCategoryText: {
    fontSize: 12,
    color: '#666666',
  },
  importantBadge: {
    position: 'absolute',
    top: 10,
    right: 10,
    backgroundColor: '#FFD700',
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
  },
  importantText: {
    fontSize: 12,
    color: '#333333',
    fontWeight: 'bold',
  },
  cardActionBar: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderTopWidth: 1,
    borderTopColor: '#F0F0F0',
  },
  actionButton: {
    padding: 8,
  },
  actionButtonText: {
    fontSize: 14,
    color: '#273F4F',
    fontWeight: '500',
  },
  darkActionText: {
    color: '#CCCCCC',
  },
  disabledButton: {
    opacity: 0.3,
  },
  bookmarkedIcon: {
    color: '#FFD700',
    fontSize: 18,
  },
  gestureHint: {
    marginTop: 16,
    opacity: 0.5,
  },
  gestureHintText: {
    fontSize: 12,
    color: '#666666',
    textAlign: 'center',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyText: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#EFEEEA',
  },
  darkStatsContainer: {
    backgroundColor: '#333333',
    borderTopColor: '#444444',
  },
  stats: {
    flexDirection: 'column',
  },
  statText: {
    fontSize: 12,
    color: '#666666',
    marginBottom: 2,
  },
  readingModeButton: {
    backgroundColor: '#F0F0F0',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  darkModeActive: {
    backgroundColor: '#FFD700',
  },
  readingModeText: {
    fontSize: 12,
    color: '#273F4F',
  },
  darkModeActiveText: {
    color: '#333333',
    fontWeight: 'bold',
  },
});

export default OnelinerScreen;